//multithreading and using yield stop sleep methods
class A extends Thread{
						public void run(){
							for(int i=1;i<5;i++){
								//if(i==1) yield(); //sacrifice for 1 line 
								System.out.println("\tfrom thread A:i="+i);
							}
							System.out.println("Exit from A");
						}
					}
class B extends Thread{
						public void run(){
							for(int j=1;j<5;j++){
								if(j==1) stop();	//permanently stop B
								System.out.println("\tfrom thread B:j="+j);
							}
							System.out.println("Exit from B");
						}
					}
class C extends Thread{
						public void run(){
							for(int k=1;k<5;k++){
								System.out.println("\tfrom thread C:k="+k);
								if(k==1)
								try
								{
									sleep(1000);//stops for 1000ms
								}
								catch (Exception e){
								}
							}
							System.out.println("Exit from C");
						}
					}
class ThreadMethods{
					public static void main(String[]args){
						A threadA=new A();//temporary object creation
						B threadB=new B();//start is using run function...by default we have to name it run
						C threadC=new C();
						System.out.println("start thread A");
						threadA.start();
						System.out.println("start thread B");
						threadB.start();
						System.out.println("start thread C");
						threadC.start();
						System.out.println("end of main thread");
					}
				}
